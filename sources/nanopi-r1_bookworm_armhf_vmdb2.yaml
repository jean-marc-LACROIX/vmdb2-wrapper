# Use like this: sudo vmdb2 nanopi-r1_bookworm_armhf_vmdb2.yaml --output=../images/nanopi-r1_bookworm_armhf.img --rootfs-tarball=../rootfs/bookworm_armhf_rootfs.tgz --verbose --log=../log_build/log_nanopi-r1_bookworm_armhf_`/bin/date +"%F-%Hh-%Mmin"`.txt

# Please remember that full documentation is available here :

# https://vmdb2-manual.liw.fi/#step-mkpart

# Following code  is   organized in   functionnal sections.  In   each
# section, steps (for vmdb2 point of vue) are defined.

steps:

  # SECTION 1/5: Prepare environnement for new image
  # ------------------------------------------------
 
  # Create one file with 4G size. File name is set by "--output" shell
  # parameter option

  - mkimg: "{{ output }}"
    size:  4G

  # Create  partition entry on new image  file. In  order to always be
  # compatible  with previous old systems  and tools, prefer partition
  # type "msdos" instead of "gpt"

  - mklabel: msdos
    device:  "{{ output }}"

  # Then create  one primary partition.   In order to support multiple
  # partitions,  create also one  logical name (option  tags) for this
  # partition.  It  is  therefore possible to use  this  name later to
  # reference this object.

  - mkpart: primary
    device: "{{ output }}"
    start:  16M
    end:    100%
    tag:    rootfs_partition_name

  # Create loop devices for partitions in image file.

  - kpartx: "{{ output }}"

  # Format image with standard "ext4" Linux

  - mkfs: ext4
    partition: rootfs_partition_name

  # Mount image (via loop device) on temporary mount point

  - mount: rootfs_partition_name

  # Unpack a tarball of the root filesystem to the image, and set the
  # rootfs_unpacked condition to true. If the tarball doesnt exist,do
  # nothing and leave the rootfs_unpacked condition to false.

  - unpack-rootfs: rootfs_partition_name

  # SECTION 2/5: Create rootfs and minimal Debian configuration
  # -----------------------------------------------------------
 
  # Create one rootfs on image according architecture, site and wished
  # Debian  release. please remember that no  kernel and no u-boot are
  # installed here

  - debootstrap: bookworm
    mirror: http://ftp.de.debian.org/debian
    target: rootfs_partition_name
    arch:   armhf
    components:
    - main
    - contrib
    - non-free
    unless: rootfs_unpacked

  # Install default files, so  that futur Debian commands "apt update"
  # and "apt upgrade" will run

  - create-file: /etc/apt/sources.list
    contents: |+
        # current Debian release (V12)
        deb http://ftp.de.debian.org/debian bookworm main contrib non-free non-free-firmware
        # next Debian release (V13)
        #deb http://ftp.de.debian.org/debian trixie   main contrib non-free non-free-firmware
        #
    unless: rootfs_unpacked

  # Install flash-kernel  &  initramfs-tools packages,  which needs to
  # already have been installed before creating /boot final directory

  - apt: install
    packages:
      - flash-kernel
      - initramfs-tools
    tag: rootfs_partition_name
    unless: rootfs_unpacked

  # Create a tarball of  the image root filesystem.  File name of this
  # file is defined by command  line option "--rootfs-tarball". Please
  # note  that  after    this step,  previous    condition  defined by
  # "rootfs_unpacked" change

  - cache-rootfs: rootfs_partition_name

  # Install   preferences  on the  target.   On  many SBC target, only
  # recent kernel  has a correct native DTS/DTB.  As  a result, define
  # one policy (for apt point of vue)

  - create-file: /etc/apt/preferences.d/debian_preferences.pref
    contents: |+
       # file : /etc/apt/preferences.d/debian_preferences.pref
       # 
       # define behaviour on current release
       Package: *
       Pin: release o=Debian,l=Debian,n=bookworm
       Pin-Priority: 500

       # define behaviour on next release
       Package: *
       Pin: release o=Debian,l=Debian,n=trixie
       Pin-Priority: 50

       # define behaviour on kernel, so that new DTS is supported
       #Package: linux-image-rt-armmp
       #Pin: release o=Debian,l=Debian,n=trixie
       #Pin-Priority: 980

       # use this package for most recent firmware for internal wifi
       #Package: firmware-brcm80211
       #Pin: release o=Debian,l=Debian,n=trixie
       #Pin-Priority: 980
    unless: rootfs_unpacked

  # Launch a shell into chroot and make following actions...

  - chroot: rootfs_partition_name
    shell: |
      # Update internal Debian apt data base

      apt-get update

      # Update local  installed packages according current  Debian apt
      # preference

      apt-get --assume-yes upgrade

      # When installing kernel, "flash-kernel" & "initramfs" tools are
      # automatically called. Because the target is not yet configured
      # (/etc/fstab) we  backup and   remove post installation  script
      # during kernel installation, so that ther are no action on
      # rootfs.

      mv /etc/kernel/postinst.d/initramfs-tools /etc/kernel/postinst.d/zz-flash-kernel /

      # Install the current generic linux kernel for all armhf architecture

      apt-get --assume-yes install linux-image-rt-armmp

      # resore  previous   post-hook script,   because now  kernel  is
      # correcly installed on rootfs.

      mv /initramfs-tools /zz-flash-kernel /etc/kernel/postinst.d/

      # python3 is needed to launch "Ansible" tools later

      apt-get --assume-yes install python3 python3-apt

      # openssh-server is needed to connect to target on Ethernet port

      apt-get --assume-yes install openssh-server openssh-sftp-server

      # psmisc package for very usefull tools: pstree (!) 

      #apt-get --assume-yes install psmisc

      # bind9-host package for very usefull tools: dig and host

      #apt-get --assume-yes install bind9-host

      # In order to support wifi in STA & AP mode, install dedicated firmwares

      #apt-get --assume-yes install firmware-brcm80211 firmware-linux-free

      # In order to support wifi in STA mode, install user space tools

      #apt-get --assume-yes install iw wireless-tools wireless-regdb wpasupplicant isc-dhcp-client

      # In order to support usb tools such as "lsusb"

      #apt-get --assume-yes install usbutils

  # When target will  boot later,  we must  be sure  to have  one  ssh
  # access on  root  account because at  this time,  only Unix root is
  # created.  Of course, sysadmin set correct DHCP/DNS/default gateway
  # infrastructure,    so that one IPV4   address   is assigned to the
  # target.  Because this is the  first connection, we change  default
  # Debian  "/etc/ssh/sshd_config" profile bahaviour.   With  this new
  # profile configuration, root access is enable on the target without
  # password. Please  update  ASAP  this file according   your private
  # security   policy.  Please be sure  to    install this file  after
  # installing  Debian package,  so that  following  configuration  is
  # used instead of Debian.

  - create-file: /etc/ssh/sshd_config
    contents: |+
       AllowUsers                          root
       AcceptEnv                           LANG
       AddressFamily                       inet
       AllowTcpForwarding                  no
       AuthorizedKeysFile                  %h/.ssh/authorized_keys
       Banner                              none
       ChallengeResponseAuthentication     no
       Ciphers                             aes256-ctr
       ClientAliveCountMax                 5
       ClientAliveInterval                 20
       Compression                         no
       DebianBanner                        yes
       GSSAPIAuthentication                no
       GSSAPIKeyExchange                   no
       GSSAPICleanupCredentials            no
       HostbasedAuthentication             no
       HostbasedUsesNameFromPacketOnly     no
       HostKey                             /etc/ssh/ssh_host_ed25519_key
       IgnoreRhosts                        yes
       IgnoreUserKnownHosts                no
       KerberosAuthentication              no
       KerberosOrLocalPasswd               no
       KerberosTicketCleanup               no
       Port                                22
       ListenAddress                       0.0.0.0
       LoginGraceTime                      30
       LogLevel                            INFO
       MACs                                hmac-sha2-512
       MaxAuthTries                        3
       MaxSessions                         1
       MaxStartups                         10:30:60
       PasswordAuthentication              yes
       PermitEmptyPasswords                yes
       PermitRootLogin                     yes
       PermitTTY                           yes
       PermitTunnel                        yes
       PermitUserEnvironment               yes
       PermitUserRC                        yes
       PidFile                             /var/run/sshd.pid
       PrintLastLog                        yes
       PrintMotd                           no
       PubkeyAcceptedKeyTypes              ssh-ed25519
       PubkeyAuthentication                yes
       StrictModes                         yes
       Subsystem                           sftp   /usr/lib/openssh/sftp-server
       SyslogFacility                      AUTH
       TCPKeepAlive                        yes
       UsePAM                              no
       UseDNS                              yes
       X11DisplayOffset                    10
       X11Forwarding                       yes
       X11UseLocalhost                     yes
       XAuthLocation                       /usr/bin/xauth

  # Create mandatory kernel modules (/etc/modules) loaded on startup

  - create-file: /etc/modules
    contents: |+
      # Install 8021q module, in order to manage VLAN truncking

      8021q

      # Install module  kernel (brcmfmac) for internal Wifi. Remember,
      # this is needed Debian Package firmware-brcm80211

      brcmfmac debug=1

      # LAN port : install  Ethernet driver (Ethernet on USB) (10/100)
      # r8152

      r8152

  # Create also   mandatory  kernel modules  blacklisted.  It  is very
  # important to never load specific  module due to staging drivers or
  # more often due  to the generic  aspect of Debian. For example,  it
  # can be noted that VGA/HDMI is not available on this target, but is
  # available  on the  SoC. Of course,  video driver   is loaded  as a
  # default condition, but we can blacklist for tis target

  - create-file: /etc/modprobe.d/blacklist-driver-video.conf
    contents: |+

     # blacklist Linux hdmi/vga driver, because not available on this
     # SBC

     blacklist videodev 
     blacklist v4l2_mem2mem
     blacklist sunxi_cedrus
     blacklist videobuf2_dma_contig 
     blacklist videobuf2_memops 

  # Create /etc/fstab   file  with  uuid  and   mounting  point. VMDB2
  # generate a line with  following options... Remenber that this UUID
  # is only here for example, because created by mkfs tool

  # UUID=3af99e2a-b4ec-4874-924c-e42a50613644 / ext4 noatime,nodiratime,errors=remount-ro 0 

  - fstab: rootfs_partition_name

  # SECTION 3/5: Prepare initramfs & flashkernel configuration
  # ----------------------------------------------------------
 
  # Now, all  code is not shared with  "rootfs cache" and is dedicated
  # to target

  # Set default  hostname    of target.  Please   note  there  are  no
  # requirements for this value, it is  user defined. Good practice is
  # to use the same name than DTS

  - create-file: /etc/hostname
    contents: |+
      nanopir1

  # According    /usr/share/doc/flash-kernel/README.gz  documentation,
  # default data-base    for   all  supported   SBC  (located     into
  # /usr/share/flash-kernel/db/all.db) does  not yet support nanopi-r1
  # board.   As  a  result,  create     one entry  and  install   this
  # definition in "/etc/flashkernel/db", so that this file is parsed
  # earlier when launching "flash-kernel" tool

  - create-file: /etc/flash-kernel/db
    contents: |+
      Machine: FriendlyElec NanoPi-R1
      Kernel-Flavors: armmp armmp-lpae
      Boot-Script-Path: /boot/boot.scr
      DTB-Id: sun8i-h3-nanopi-r1.dtb
      U-Boot-Script-Name: bootscr.sunxi
      Required-Packages: u-boot-tools

  # According    /usr/share/doc/flash-kernel/README.gz  documentation,
  # because  nanopi-r1  is not  yet supported,  then  skip the machine
  # auto-detection from /proc/cpuinfo and force a specific Machine

  - create-file: /etc/flash-kernel/machine
    contents: |+
      FriendlyElec NanoPi-R1

  - chroot: rootfs_partition_name
    shell: |

      # Add hostname to /etc/hosts for IPv4 & IPv6
      HOSTNAME=$(cat /etc/hostname)
      sed -i "2i127.0.0.2\t$HOSTNAME" /etc/hosts
      sed -i "4i::2\t\t$HOSTNAME" /etc/hosts

      sed -i "s@errors=remount-ro@noatime,nodiratime,errors=remount-ro@g" /etc/fstab

      sed -i "s@quiet@root=$(grep ^UUID /etc/fstab | cut -d \  -f 1) net.ifnames=0@g" /etc/default/flash-kernel

      # "initramfs" & "flash-kernel" tools needs uuid rootfs in
      # order to make the job. Back-up fsck hook now

      mv /usr/share/initramfs-tools/hooks/fsck /usr/share/initramfs-tools/hooks/fsck.bak
      chmod -x /usr/share/initramfs-tools/hooks/fsck.bak

      # Fix fsck to read rootfs_partition_name fstype in fstab

      sed "s@\[.*\"\/\".*|| @@g" /usr/share/initramfs-tools/hooks/fsck.bak > /usr/share/initramfs-tools/hooks/fsck
      chmod +x /usr/share/initramfs-tools/hooks/fsck

      update-initramfs -c -k $(ls -l /vmlinuz | sed "s%^.*vmlinuz-\(.*\)$%\1%g")

      # remove root  password, so that first  login  on default tty is
      # "root" without any password. It is user responsability to make
      # changes according his security policy (!)

      sed -i "s@root:\*:@root::@g" /etc/shadow

  # SECTION 4/5: Install u-boot
  # ---------------------------
 
  # Because nanopi-r1 u-boot is not available in Debian
  # package, get current package from Armbian project

  - root-fs: rootfs_partition_name
    shell: |
      curl -L -o $ROOT/u-boot.deb https://imola.armbian.com/apt/pool/main/l/linux-u-boot-nanopi-r1-current/linux-u-boot-current-nanopi-r1_21.05.1_armhf.deb

  # Install Armbian u-boot package in rootfs

  - chroot: rootfs_partition_name
    shell: |
      dpkg -i u-boot.deb
      rm u-boot.deb

  # Install  directly u-boot on rootfs.  Please note  that in standard
  # Debian   package   "u-boot-sunxi",   target   nanopir1    is   not
  # available.   Look  at command  :   dpkg  -L u-boot-sunxi |grep  -i
  # nanopi.

  - root-fs: rootfs_partition_name
    shell: |
      dd conv=fsync,notrunc if=$ROOT/usr/lib/linux-u-boot-current-nanopi-r1_21.05.1_armhf/u-boot-sunxi-with-spl.bin of={{ output }} bs=1024 seek=8

  # SECTION 5/5: Make configuration for current target
  # --------------------------------------------------
 
  - create-file: /etc/network/interfaces
    contents: |+
      # loopback interface 
      allow-auto lo
      iface      lo inet loopback

      # interface 1/3: WAN, eth0 (100 Mbit/sec), DHCP only on IPV4
      allow-auto eth0
      iface      etho inet dhcp
  
      # interface 2/3: LAN eth1 (1 Gbit/sec), DHCP only on IPV4
      allow-auto eth1
      #iface     eth1 inet dhcp
      iface      eth1 inet static
      address    192.168.254.99
      network    192.168.254.0
      broadcast  192.168.254.255
      netmask    255.255.255.0
      up         /usr/sbin/ip route add default via 192.168.254.253 dev eth1
      down       /usr/sbin/ip route add default dev eth1

      # interface 3/3: WLAN wlan0, wifi in STA mode
      allow-auto wlan0
      iface      wlan0 inet dhcp
      wpa-group       CCMP TKIP
      wpa-pairwise    CCMP TKIP
      wpa-proto       WPA RSN 
      wpa-key-mgmt    WPA-PSK
      wpa-auth-alg    OPEN
      wpa-debug-level 3   # either 1,2 or 3
      wpa-driver      wext,nl80211
      wpa-iface       wlan0
      wpa-ap-scan     1
      wpa-scan-ssid   1
      wpa-logfile     /var/log/wpa_supplicant.log
      wpa-psk         "12lapiteau;"
      wpa-ssid        "Pixel-3a-jm"
      wpa-ctrl_interface /var/run/wpa_supplicant

  - root-fs: rootfs_partition_name
    shell: |
      test -e vmdb2-ansible.yaml || ln -s vmdb2-ansible.yaml.example vmdb2-ansible.yaml
      mount -t proc proc $ROOT/proc

  - ansible: rootfs_partition_name
    playbook: vmdb2-ansible.yaml

  - root-fs: rootfs_partition_name
    shell: |
      # Restore fsck
      mv $ROOT/usr/share/initramfs-tools/hooks/fsck.bak $ROOT/usr/share/initramfs-tools/hooks/fsck
      chmod +x $ROOT/usr/share/initramfs-tools/hooks/fsck

      umount $ROOT/proc
      rm $ROOT/etc/flash-kernel/machine

  - create-file: /etc/resolv.conf
    contents: |

       # either set one DNS   server in canonical IPV4 format,  either
       # let it blank  (or in comment) so that  DHCP server can update
       # dynamically this file when receiving DHCP-LEASE

       nameserver  192.168.254.253


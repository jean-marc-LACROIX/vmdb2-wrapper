# Use like this: sudo vmdb2 nanopi-r1_bookworm_armhf_vmdb2.yaml --output=../images/nanopi-r1_bookworm_armhf.img --rootfs-tarball=../rootfs/bookworm_armhf_rootfs.tgz --verbose --log=../log_build/log_nanopi-r1_bookworm_armhf_`/bin/date +"%F-%Hh-%Mmin"`.txt

steps:

  # Create one file with 4G size. File name is set by "--output" shell
  # parameter option

  - mkimg: "{{ output }}"
    size:  4G

  # Create partition entry on new image file...

  - mklabel: msdos
    device:  "{{ output }}"

  # And then  create one primary partition

  - mkpart: primary
    device: "{{ output }}"
    start:  16M
    end:    100%
    tag:    root

  # Create now one entry (into /dev/) in  the kenrnel with this new device

  - kpartx: "{{ output }}"

  # Format image with standard ext4 filesystem tools

  - mkfs: ext4
    partition: root

  # Mount image (via loop device) on temporary mount point

  - mount: root

  # Unpack a tarball of the root filesystem to the image, and set the
  # rootfs_unpacked condition to true. If the tarball doesnt exist,do
  # nothing and leave the rootfs_unpacked condition to false.

  - unpack-rootfs: root

  # Create one rootfs on image according architecture, site and wished
  # Debian release

  - debootstrap: bookworm
    mirror: http://ftp.de.debian.org/debian
    target: root
    arch:   armhf
    components:
    - main
    - contrib
    - non-free
    unless: rootfs_unpacked

  - apt: install
    packages:
      - initramfs-tools
    tag: root
    unless: rootfs_unpacked

  # Install default files definition for current Debian, so that
  # futur Debian commands "apt update" and "apt upgrade" will run

  - chroot: root
    shell: |
      echo "deb http://ftp.de.debian.org/debian bookworm main contrib non-free non-free-firmware" > /etc/apt/sources.list
    unless: rootfs_unpacked

  # Install flash-kernel packages using  apt,  which needs to  already
  # have been installed before creating /boot final directory

  - apt: install
    packages:
      - flash-kernel
    tag: root
    unless: rootfs_unpacked
    recommends: true

  # Create a tarball of  the image root filesystem.  File name of this
  # file is defined by command line option "--rootfs-tarball"

  - cache-rootfs: root
    unless: rootfs_unpacked

  # launch a shell into chroot and make following actions...

  - chroot: root
    shell: |
      apt-get update
      apt-get --assume-yes upgrade
      mv /etc/kernel/postinst.d/initramfs-tools /etc/kernel/postinst.d/zz-flash-kernel /
      # Install the current generic linux kernel for all armhf architecture
      apt-get --assume-yes install linux-image-rt-armmp
      # python3 is needed to launch ansible later
      apt-get --assume-yes install python3 python3-apt
      # openssh-server is needed to connect to target from Ethernet port
      apt-get --assume-yes install openssh-server 
      # psmisc package for very usefull tools: pstree (!) 
      apt-get --assume-yes install psmisc
      # bind9-host package for very usefull tools: dig and host
      apt-get --assume-yes install bind9-host
      mv /initramfs-tools /zz-flash-kernel /etc/kernel/postinst.d/

  # When target will  boot later,  we must  be sure  to have  one  ssh
  # access on  root  account because at  this time,  only Unix root is
  # created.  Of course, sysadmin set correct DHCP/DNS/default gateway
  # infrastructure,    so that one IPV4   address   is assigned to the
  # target.  Because this is the  first connection, we change  default
  # Debian "/etc/ssh/sshd_config" bahaviour.  With this new file, root
  # access  is enable  on the target  without  password. Please update
  # ASAP this file according your private security policy.

  - create-file: /etc/ssh/sshd_config
    contents: |+
      # sshd daemon is listening on standard 22 IANA port
      Port                    22
      # listen to IN_ADDR, that is on all interfaces...
      ListenAddress           0.0.0.0
      # Root login is always accepted, remember that only one Unix account (root)
      PermitRootLogin         yes
      # Disable host authentication
      HostbasedAuthentication no
      # Authentication with public key is accepted, key can be installed later via ssh-copy-id tool
      PubkeyAuthentication    yes
      # Authentication with password key is accepted
      PasswordAuthentication  yes
      # Authentication with empty root passwoard is accepted
      PermitEmptyPasswords    yes
      # Because  simplest config, no PAM extension is supported
      UsePAM                  no
      # No X11, because only connected via one ssh in tty mode
      X11Forwarding           no
      # Don't edit motd from current Debian distribution
      PrintMotd               no
      # Minimal env variable accepted
      AcceptEnv               LANG LC_*

  # Set   default hostname  of   target.  Please note    there are  no
  # requirements for this value, it is user defined.

  - create-file: /etc/hostname
    contents: |+
      nanopi-r1

  # Create one empty fstab entry (/etc/fstab file) on target. 

  - fstab: root

  - root-fs: root
    shell: |
      curl -L -o $ROOT/linux-dtb.deb https://imola.armbian.com/apt/pool/main/l/linux-5.10.16-sunxi/linux-dtb-current-sunxi_21.02.2_armhf.deb

  - create-file: /etc/kernel/postinst.d/add-armbian-dtb
    contents: |+
      #!/bin/sh -e

      version="$1"

      # passing the kernel version is required
      if [ -z "${version}" ]; then
      	echo >&2 "W: add-armbian-dtb: ${DPKG_MAINTSCRIPT_PACKAGE:-kernel package} did not pass a version number"
      	exit 2
      fi

      # only works with boards specified in /etc/flash-kerne/db, flash-kernel supported boards' dtb should be in kernel pkg
      if [ ! -e "/etc/flash-kernel/db" ]; then
      	echo >&2 "W: add-armbian-dtb: Missing /etc/flash-kernel/db, add-armbian-dtb cannot continue"
      	exit 1
      fi

      dtbfile=$(grep DTB-Id /etc/flash-kernel/db | sed "s@.*DTB-Id: @@g")

      # only works with available /boot/armbian-dtb/${dtbfile}
      if [ ! -e "/boot/armbian-dtb/${dtbfile}" ]; then
      	echo >&2 "W: add-armbian-dtb: Missing /boot/armbian-dtb/${dtbfile}, add-armbian-dtb cannot continue"
      	exit 1
      fi

      if [ -e "/lib/linux-image-${version}/${dtbfile}" ]; then
        if cmp -s /boot/armbian-dtb/${dtbfile} /lib/linux-image-${version}/${dtbfile}; then
          echo "I: ${dtbfile} imported from Armbian is already in /lib/linux-image-${version}/"
        else
          echo "I: This board is supported in this Debian kernel"
        fi
        echo "I: Skipping adding dtb imported from Armbian to new kernel"
      	exit 0
      fi

      echo "I: This board is not supported in this Debian kernel"
      echo "I: Adding ${dtbfile} imported from Armbian to /lib/linux-image-${version}/"

      cp /boot/armbian-dtb/${dtbfile} /lib/linux-image-${version}/

  - create-file: /etc/kernel/postrm.d/add-armbian-dtb
    contents: |+
      #!/bin/sh -e

      version="$1"

      # passing the kernel version is required
      if [ -z "${version}" ]; then
      	echo >&2 "W: add-armbian-dtb: ${DPKG_MAINTSCRIPT_PACKAGE:-kernel package} did not pass a version number"
      	exit 2
      fi

      # only works with boards specified in /etc/flash-kerne/db, flash-kernel supported boards' dtb should be in kernel pkg
      if [ ! -e "/etc/flash-kernel/db" ]; then
      	echo >&2 "W: add-armbian-dtb: Missing /etc/flash-kernel/db, add-armbian-dtb cannot continue"
      	exit 1
      fi

      dtbfile=$(grep DTB-Id /etc/flash-kernel/db | sed "s@.*DTB-Id: @@g")

      # only works with available /boot/armbian-dtb/${dtbfile}
      if [ ! -e "/boot/armbian-dtb/${dtbfile}" ]; then
      	echo >&2 "W: add-armbian-dtb: Missing /boot/armbian-dtb/${dtbfile}, add-armbian-dtb cannot continue"
      	exit 1
      fi

      if [ ! -e "/lib/linux-image-${version}/${dtbfile}" ]; then
      	exit 0
      fi

      if cmp -s /boot/armbian-dtb/${dtbfile} /lib/linux-image-${version}/${dtbfile}; then
        echo "I: Removing Armbian's ${dtbfile} from /lib/linux-image-${version}/ added on kernel install"
        rm /lib/linux-image-${version}/${dtbfile}
      else
        echo "I: ${dtbfile} in /lib/linux-image-${version}/ is not Armbian's"
        echo "I: Skipping removing dtb imported from Armbian from /lib/linux-image-${version}/"
      fi

  - chroot: root
    shell: |
      dpkg -i linux-dtb.deb
      mkdir -p /boot/armbian-dtb
      cp /boot/dtb-5.10.16-sunxi/sun8i-h3-nanopi-r1.dtb /boot/armbian-dtb/
      dpkg -P linux-dtb-current-sunxi
      rm linux-dtb.deb
      chmod +x /etc/kernel/postinst.d/add-armbian-dtb
      chmod +x /etc/kernel/postrm.d/add-armbian-dtb
      cp /boot/armbian-dtb/sun8i-h3-nanopi-r1.dtb /usr/lib/linux-image-$(ls -l /vmlinuz | sed "s%^.*vmlinuz-\(.*\)$%\1%g")/

  - create-dir: /lib/firmware/brcm

  - create-file: /lib/firmware/brcm/brcmfmac43430-sdio.txt
    contents: |+
      #AP6212_NVRAM_V1.0_20140603
      # 2.4 GHz, 20 MHz BW mode

      # The following parameter values are just placeholders, need to be updated.
      manfid=0x2d0
      prodid=0x0726
      vendid=0x14e4
      devid=0x43e2
      boardtype=0x0726
      boardrev=0x1101
      boardnum=22
      macaddr=00:90:4c:c5:12:38
      sromrev=11
      boardflags=0x00404201
      xtalfreq=26000
      nocrc=1
      ag0=255
      aa2g=1
      ccode=ALL

      pa0itssit=0x20
      extpagain2g=0

      #PA parameters for 2.4GHz, measured at CHIP OUTPUT
      pa2ga0=-168,7161,-820
      AvVmid_c0=0x0,0xc8
      cckpwroffset0=5

      # PPR params
      maxp2ga0=90
      txpwrbckof=6
      cckbw202gpo=0x5555
      legofdmbw202gpo=0x77777777
      mcsbw202gpo=0xaaaaaaaa

      # OFDM IIR :
      ofdmdigfilttype=7
      # PAPD mode:
      papdmode=2

      il0macaddr=00:90:4c:c5:12:38
      wl0id=0x431b

      #OOB parameters
      hostwake=0x40
      hostrdy=0x41
      usbrdy=0x03
      usbrdydelay=100
      deadman_to=0xffffffff
      # muxenab: 0x1 for UART enable, 0x10 for Host awake
      muxenab=0x10
      # CLDO PWM voltage settings - 0x4 - 1.1 volt
      #cldo_pwm=0x4

  # According    /usr/share/doc/flash-kernel/README.gz  documentation,
  # default data-base    for   all  supported   SBC  (located     into
  # /usr/share/flash-kernel/db/all.db) does  not yet support nanopi-r1
  # board. As  a result create  one entry  and install this definition
  # into top dir located into /etc/flashkernel/db so that this file is
  # parsed earlier

  - create-file: /etc/flash-kernel/db
    contents: |+
      Machine: FriendlyElec NanoPi-R1
      Kernel-Flavors: armmp armmp-lpae
      Boot-Script-Path: /boot/boot.scr
      DTB-Id: sun8i-h3-nanopi-r1.dtb
      U-Boot-Script-Name: bootscr.sunxi
      Required-Packages: u-boot-tools

  # According    /usr/share/doc/flash-kernel/README.gz  documentation,
  # because  nanopi-r1  is not  yet supported,  then  skip the machine
  # auto-detection from /proc/cpuinfo  or /proc/dtmodel  and forcing a
  # specific Machine

  - create-file: /etc/flash-kernel/machine
    contents: |+
      FriendlyElec NanoPi-R1

  - chroot: root
    shell: |
      apt-get -y install wireless-regdb 

      # Add hostname to /etc/hosts for IPv4 & IPv6
      HOSTNAME=$(cat /etc/hostname)
      sed -i "2i127.0.0.2\t$HOSTNAME" /etc/hosts
      sed -i "4i::2\t\t$HOSTNAME" /etc/hosts

      sed -i "s@errors=remount-ro@noatime,nodiratime,errors=remount-ro@g" /etc/fstab

      sed -i "s@quiet@root=$(grep ^UUID /etc/fstab | cut -d \  -f 1) net.ifnames=0@g" /etc/default/flash-kernel

      # Back-up fsck
      mv /usr/share/initramfs-tools/hooks/fsck /usr/share/initramfs-tools/hooks/fsck.bak
      chmod -x /usr/share/initramfs-tools/hooks/fsck.bak

      # Fix fsck to read root fstype in fstab
      sed "s@\[.*\"\/\".*|| @@g" /usr/share/initramfs-tools/hooks/fsck.bak > /usr/share/initramfs-tools/hooks/fsck
      chmod +x /usr/share/initramfs-tools/hooks/fsck

      update-initramfs -c -k $(ls -l /vmlinuz | sed "s%^.*vmlinuz-\(.*\)$%\1%g")

      sed -i "s@root:\*:@root::@g" /etc/shadow

  - root-fs: root
    shell: |
      curl -L -o $ROOT/u-boot.deb https://imola.armbian.com/apt/pool/main/l/linux-u-boot-nanopi-r1-current/linux-u-boot-current-nanopi-r1_21.05.1_armhf.deb

  - chroot: root
    shell: |
      dpkg -i u-boot.deb
      rm u-boot.deb

  - root-fs: root
    shell: |
      dd conv=fsync,notrunc if=$ROOT/usr/lib/linux-u-boot-current-nanopi-r1_21.05.1_armhf/u-boot-sunxi-with-spl.bin of={{ output }} bs=1024 seek=8

  - create-file: /etc/network/interfaces
    contents: |+
      # loopback interface 
      allow-auto lo
      iface      lo inet loopback

      # interface WAN, eth0 (100 Mbit/sec), DHCP only on IPV4
      allow-auto eth0
      #iface     etho inet dhcp
      iface      etho inet static
      address    192.168.254.98
      network    192.168.254.0
      broadcast  192.168.254.255
      netmask    255.255.255.0
  
      # interface LAN eth1 (1 Gbit/sec), DHCP only on IPV4
      allow-auto eth1
      #iface     eth1 inet dhcp
      iface      eth1 inet static
      address    192.168.254.99
      network    192.168.254.0
      broadcast  192.168.254.255
      netmask    255.255.255.0
      up         /usr/sbin/ip route add default via 192.168.254.253 dev eth1
      down       /usr/sbin/ip route add default dev eth1


  - root-fs: root
    shell: |
      test -e vmdb2-ansible.yaml || ln -s vmdb2-ansible.yaml.example vmdb2-ansible.yaml
      mount -t proc proc $ROOT/proc

  - ansible: root
    playbook: vmdb2-ansible.yaml

  - root-fs: root
    shell: |
      # Restore fsck
      mv $ROOT/usr/share/initramfs-tools/hooks/fsck.bak $ROOT/usr/share/initramfs-tools/hooks/fsck
      chmod +x $ROOT/usr/share/initramfs-tools/hooks/fsck

      umount $ROOT/proc
      rm $ROOT/etc/flash-kernel/machine

  - create-file: /etc/resolv.conf
    contents: |
       nameserver  192.168.254.253

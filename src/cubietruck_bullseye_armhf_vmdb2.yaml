# Use like this : sudo vmdb2 cubietruck_bullseye_armhf_vmdb2.yaml --output=../images/cubietruck_bullseye_armhf.img --rootfs-tarball=../rootfs_cache/bullseye_armhf_rootfs.tgz --verbose --log=../log_build/log_cubietruck_bullseye_armhf_`/bin/date +"%F-%Hh-%Mmin"`.txt 
steps: 

  - mkimg: "{{ output }}"
    size: 4G

  - mklabel: msdos
    device: "{{ output }}"

  - mkpart: primary
    device: "{{ output }}"
    start: 16M
    end: 100%
    tag: root

  - kpartx: "{{ output }}"

  - mkfs: ext4
    partition: root

  - mount: root

  - unpack-rootfs: root

  - debootstrap: bullseye
    mirror: http://ftp.de.debian.org/debian
    target: root
    arch: armhf
    components:
    - main
    - contrib
    - non-free
    unless: rootfs_unpacked

  - apt: install
    packages:
      - initramfs-tools
    tag: root
    unless: rootfs_unpacked

  - chroot: root
    shell: |
      echo "deb http://ftp.de.debian.org/debian bullseye main contrib non-free" > /etc/apt/sources.list
    unless: rootfs_unpacked

  - apt: install
    packages:
      - flash-kernel
    tag: root
    unless: rootfs_unpacked

  - cache-rootfs: root
    unless: rootfs_unpacked

  - chroot: root
    shell: |
      apt-get update
      apt-get --assume-yes upgrade
      mv /etc/kernel/postinst.d/initramfs-tools /etc/kernel/postinst.d/zz-flash-kernel /

      # Install the current generic linux kernel for all armhf architecture

      apt-get --assume-yes install linux-image-armmp-lpae

      # python3 is needed to launch ansible later

      apt-get --assume-yes install python3 python3-apt

      # openssh-server is needed to connect to target from Ethernet port

      apt-get --assume-yes install openssh-server 

      # psmisc package for very usefull tools: pstree (!) 

      apt-get --assume-yes install psmisc

      # bind9-host package for very usefull tools: dig and host

      apt-get --assume-yes install bind9-host
      mv /initramfs-tools /zz-flash-kernel /etc/kernel/postinst.d/

      # Try to manage the difficult issue on local wifi & BT chip (!).
      # On recent  Debian  kernel   (> 6.x), kernel    module brcmfmac
      # contains  now  code to manage    dedicated wifi chip (BCM43362
      # original Ampak AP6210). Please look also to :
      # (https://linux-sunxi.org/Cubietech_Cubietruck) and at the same
      # time  BT. It is  not very clear why there  are still errors in
      # kernel message on  BT interface (!). With following  firmware,
      # wifi is correctly detected

      apt-get --assume-yes install firmware-brcm80211 firmware-linux-free

  # define the target name 
  - create-file: /etc/hostname
    contents: |+
      Cubietruck

  - fstab: root

  # With Debian flash-kernel  tools,  first step  is to  identify  the
  # current target...

  - create-file: /etc/flash-kernel/machine
    contents: |+
      Cubietech Cubietruck

  # With  Debian   flash-kernel  tools,  second  step is   to identify
  # the internal parameters. Please be sure to be relevant with u-boot
  # dts/dtb

  - create-file: /etc/flash-kernel/db
    contents: |+
      Machine: Cubietech Cubietruck
      Kernel-Flavors: armmp armmp-lpae
      Boot-Script-Path: /boot/boot.scr
      DTB-Id: sun7i-a20-cubietruck.dtb
      U-Boot-Script-Name: bootscr.sunxi
      Required-Packages: u-boot-tools

  - chroot: root
    shell: |
      
      # Add hostname to /etc/hosts for IPv4 & IPv6
      HOSTNAME=$(cat /etc/hostname)
      sed -i "2i127.0.0.2\t$HOSTNAME" /etc/hosts
      sed -i "4i::2\t\t$HOSTNAME" /etc/hosts

      sed -i "s@errors=remount-ro@noatime,nodiratime,errors=remount-ro@g" /etc/fstab

      sed -i "s@quiet@root=$(grep ^UUID /etc/fstab | cut -d \  -f 1) net.ifnames=0@g" /etc/default/flash-kernel

      # Back-up fsck
      mv /usr/share/initramfs-tools/hooks/fsck /usr/share/initramfs-tools/hooks/fsck.bak
      chmod -x /usr/share/initramfs-tools/hooks/fsck.bak

      # Fix fsck to read root fstype in fstab
      sed "s@\[.*\"\/\".*|| @@g" /usr/share/initramfs-tools/hooks/fsck.bak > /usr/share/initramfs-tools/hooks/fsck
      chmod +x /usr/share/initramfs-tools/hooks/fsck

      update-initramfs -c -k $(ls -l /vmlinuz | sed "s%^.*vmlinuz-\(.*\)$%\1%g")

      # Remove root password, so that no password in needed for account "root"
      sed -i "s@root:\*:@root::@g" /etc/shadow

  - apt: install
    packages:
      - u-boot-sunxi
    tag: root 

  - root-fs: root
    shell: |
      dd conv=fsync,notrunc if=$ROOT/usr/lib/u-boot/Cubietruck/u-boot-sunxi-with-spl.bin of={{ output }} bs=1024 seek=8

  - create-file: /etc/network/interfaces.d/lo
    contents: |+
      auto lo
      iface lo inet loopback

  - create-file: /etc/network/interfaces.d/eth0
    contents: |+
      auto eth0
      iface eth0 inet dhcp

  - root-fs: root
    shell: |
      test -e vmdb2-ansible.yaml || ln -s vmdb2-ansible.yaml.example vmdb2-ansible.yaml
      mount -t proc proc $ROOT/proc

  - ansible: root
    playbook: vmdb2-ansible.yaml

  - root-fs: root
    shell: |
      # Restore fsck
      mv $ROOT/usr/share/initramfs-tools/hooks/fsck.bak $ROOT/usr/share/initramfs-tools/hooks/fsck
      chmod +x $ROOT/usr/share/initramfs-tools/hooks/fsck

      umount $ROOT/proc
      rm $ROOT/etc/flash-kernel/machine
      diff vmdb2-ansible.yaml.example vmdb2-ansible.yaml && test -L vmdb2-ansible.yaml && rm vmdb2-ansible.yaml || true

  - create-file: /etc/resolv.conf
    contents: |

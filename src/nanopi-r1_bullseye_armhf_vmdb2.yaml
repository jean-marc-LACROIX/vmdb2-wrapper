# Use like this: sudo vmdb2 nanopi-r1_bullseye_armhf_vmdb2.yaml --output=../images/nanopi-r1_bullseye_armhf.img --rootfs-tarball=../rootfs_cache/bullseye_armhf_rootfs.tgz --verbose --log=../log_build/log_nanopi-r1_bullseye_armhf_`/bin/date +"%F-%Hh-%Mmin"`.txt
steps:
  - mkimg: "{{ output }}"
    size: 4G

  - mklabel: msdos
    device: "{{ output }}"

  - mkpart: primary
    device: "{{ output }}"
    start: 16M
    end: 100%
    tag: root

  - kpartx: "{{ output }}"

  - mkfs: ext4
    partition: root

  - mount: root

  - unpack-rootfs: root

  - debootstrap: bullseye
    mirror: http://ftp.de.debian.org/debian
    target: root
    arch: armhf
    components:
    - main
    - contrib
    - non-free
    unless: rootfs_unpacked

  - apt: install
    packages:
      - initramfs-tools
    tag: root
    unless: rootfs_unpacked

  - chroot: root
    shell: |
      echo "deb http://ftp.de.debian.org/debian bullseye main contrib non-free" > /etc/apt/sources.list
    unless: rootfs_unpacked

  - apt: install
    packages:
      - flash-kernel
    tag: root
    unless: rootfs_unpacked

  - cache-rootfs: root
    unless: rootfs_unpacked

  - chroot: root
    shell: |
      apt-get update
      apt-get --assume-yes upgrade
      mv /etc/kernel/postinst.d/initramfs-tools /etc/kernel/postinst.d/zz-flash-kernel /
      # Install the current generic linux kernel for all armhf architecture
      apt-get --assume-yes install linux-image-armmp-lpae
      # python3 is needed to launch ansible later
      apt-get --assume-yes install python3 python3-apt
      # openssh-server is needed to connect to target from Ethernet port
      apt-get --assume-yes install openssh-server 
      # psmisc package for very usefull tools: pstree (!) 
      apt-get --assume-yes install psmisc
      # bind9-host package for very usefull tools: dig and host
      apt-get --assume-yes install bind9-host
      mv /initramfs-tools /zz-flash-kernel /etc/kernel/postinst.d/

  # When target will  boot later,  we must  be sure  to have  one  ssh
  # access on  root  account because at  this time,  only Unix root is
  # created.  Of course, sysadmin set correct DHCP/DNS/default gateway
  # infrastructure,    so that one IPV4   address   is assigned to the
  # target.  Because this is the  first connection, we change  default
  # Debian "/etc/ssh/sshd_config" bahaviour.  With this new file, root
  # access  is enable  on the target  without  password. Please update
  # ASAP this file according your private security policy.

  - create-file: /etc/ssh/sshd_config
    contents: |+
      # sshd daemon is listening on standard 22 IANA port
      Port                    22
      # listen to IN_ADDR, that is on all interfaces...
      ListenAddress           0.0.0.0
      # Root login is always accepted, remember that only one Unix account (root)
      PermitRootLogin         yes
      # Disable host authentication
      HostbasedAuthentication no
      # Authentication with public key is accepted, key can be installed later via ssh-copy-id tool
      PubkeyAuthentication    yes
      # Authentication with password key is accepted
      PasswordAuthentication  yes
      # Authentication with empty root passwoard is accepted
      PermitEmptyPasswords    yes
      # Because  simplest config, no PAM extension is supported
      UsePAM                  no
      # No X11, because only connected via one ssh in tty mode
      X11Forwarding           no
      # Don't edit motd from current Debian distribution
      PrintMotd               no
      # Minimal env variable accepted
      AcceptEnv               LANG LC_*

  # Set   default hostname  of   target.  Please note    there are  no
  # requirements for this value, it is user defined.

  - create-file: /etc/hostname
    contents: |+
      nanopi-r1

  # Create one empty fstab entry (/etc/fstab file) on target. 

  - fstab: root

  - create-file: /etc/flash-kernel/db
    contents: |+
      Machine: FriendlyElec NanoPi-R1
      Kernel-Flavors: armmp armmp-lpae
      Boot-Script-Path: /boot/boot.scr
      DTB-Id: sun8i-h3-nanopi-r1.dtb
      U-Boot-Script-Name: bootscr.sunxi
      Required-Packages: u-boot-tools

  - create-file: /etc/flash-kernel/machine
    contents: |+
      FriendlyElec NanoPi-R1

  - chroot: root
    shell: |
      apt-get --assume-yes install wireless-regdb firmware-brcm80211 crda

      # Add hostname to /etc/hosts for IPv4 & IPv6
      HOSTNAME=$(cat /etc/hostname)
      sed -i "2i127.0.0.2\t$HOSTNAME" /etc/hosts
      sed -i "4i::2\t\t$HOSTNAME" /etc/hosts

      sed -i "s@errors=remount-ro@noatime,nodiratime,errors=remount-ro@g" /etc/fstab

      sed -i "s@quiet@root=$(grep ^UUID /etc/fstab | cut -d \  -f 1) net.ifnames=0@g" /etc/default/flash-kernel

      # Back-up fsck
      mv /usr/share/initramfs-tools/hooks/fsck /usr/share/initramfs-tools/hooks/fsck.bak
      chmod -x /usr/share/initramfs-tools/hooks/fsck.bak

      # Fix fsck to read root fstype in fstab
      sed "s@\[.*\"\/\".*|| @@g" /usr/share/initramfs-tools/hooks/fsck.bak > /usr/share/initramfs-tools/hooks/fsck
      chmod +x /usr/share/initramfs-tools/hooks/fsck

      update-initramfs -c -k $(ls -l /vmlinuz | sed "s%^.*vmlinuz-\(.*\)$%\1%g")

      # Remove root password, so that no password in needed for account "root"
      sed -i "s@root:\*:@root::@g" /etc/shadow

  - root-fs: root
    shell: |
      curl -L -o $ROOT/u-boot.deb https://imola.armbian.com/apt/pool/main/l/linux-u-boot-nanopi-r1-current/linux-u-boot-current-nanopi-r1_21.05.1_armhf.deb

  - chroot: root
    shell: |
      dpkg -i u-boot.deb
      rm u-boot.deb

  - root-fs: root
    shell: |
      dd conv=fsync,notrunc if=$ROOT/usr/lib/linux-u-boot-current-nanopi-r1_21.05.1_armhf/u-boot-sunxi-with-spl.bin of={{ output }} bs=1024 seek=8

  - create-file: /etc/network/interfaces
    contents: |+
      # loopback interface 
      allow-auto lo
      iface      lo inet loopback

      # interface WAN, eth0 (100 Mbit/sec), DHCP only on IPV4
      allow-auto eth0
      iface     etho inet dhcp
 
      # interface LAN eth1 (1 Gbit/sec), DHCP only on IPV4
      allow-auto eth1
      iface     eth1 inet dhcp

  - root-fs: root
    shell: |
      test -e vmdb2-ansible.yaml || ln -s vmdb2-ansible.yaml.example vmdb2-ansible.yaml
      mount -t proc proc $ROOT/proc

  - ansible: root
    playbook: vmdb2-ansible.yaml

  - root-fs: root
    shell: |
      # Restore fsck
      mv $ROOT/usr/share/initramfs-tools/hooks/fsck.bak $ROOT/usr/share/initramfs-tools/hooks/fsck
      chmod +x $ROOT/usr/share/initramfs-tools/hooks/fsck

      umount $ROOT/proc
      rm $ROOT/etc/flash-kernel/machine

  - create-file: /etc/resolv.conf
    contents: |

# Use like this : sudo vmdb2 rock64_bookworm_arm64_vmdb2.yaml --output=../images/rock64_bookworm_arm64.img --rootfs-tarball=../rootfs_cache/bookworm_arm64_rootfs.tgz --verbose --log=../log_build/log_rock64_bookworm_arm64_`/bin/date +"%F-%Hh-%Mmin"`.txt

# Please remember that full documentation is available here :
# https://vmdb2-manual.liw.fi/

# Following code  is   organized in   functionnal sections.  In   each
# section, steps (for vmdb2 point of vue) are defined.

steps:

  # SECTION 1/5: Prepare local environnement for new image
  # ------------------------------------------------------

  # Create one file with 4G size. File name is set by "--output" shell
  # parameter option

  - mkimg: "{{ output }}"
    size: 3G

  # Create  partition entry on new image  file. In  order to always be
  # compatible  with previous old systems  and tools, prefer partition
  # type "msdos" instead of "gpt"

  - mklabel: msdos
    device:  "{{ output }}"

  # Then create  one primary partition.   In order to support multiple
  # partitions,  create also one  logical name (option  tags) for this
  # partition.  It  is  therefore possible to use  this  name later to
  # reference this object.

  - mkpart: primary
    device: "{{ output }}"

    # We  have  to   start   higher    than 12M  because    of     the
    # tzsw.bin.hardkernel which needs  to be  at 24576*512  Bytes.  In
    # order to be  compliant on  all SBC, we  use  16 Mb as  a default
    # configuration

    start: 16M
    end:   100%
    tag:   rootfs_partition_tag

  # Map image file partitions to loop device

  - kpartx: "{{ output }}"

  # Format root partition with standard "ext4" Linux

  - mkfs: ext4
    partition: rootfs_partition_tag

  # Mount root partition (via loop device) on temporary mount point

  - mount: rootfs_partition_tag

  # Unpack a tarball of the root filesystem to the image, and set the
  # rootfs_unpacked  condition to    true.  If the   tarball does  not
  # exist,do nothing and leave the rootfs_unpacked condition to false.

  - unpack-rootfs: rootfs_partition_tag

  # SECTION 2/5: Create rootfs and minimal Debian configuration
  # -----------------------------------------------------------

  # We choose a Debian  version and architecture. Please remember that
  # no kernel and no u-boot are installed here (because rootfs)

  - debootstrap: bookworm
    mirror: http://deb.debian.org/debian
    target: rootfs_partition_tag
    arch: arm64
    components:
    - main
    - contrib
    - non-free
    unless: rootfs_unpacked

  # Install default files, so  that futur Debian commands "apt update"
  # and "apt upgrade" will run

  - create-file: /etc/apt/sources.list
    contents: |+
        # current Debian release (V12)
        deb http://deb.debian.org/debian bookworm main contrib non-free non-free-firmware
        # current Debian release (V12) security for bookworm release
        deb http://security.debian.org/ bookworm-security main contrib non-free non-free-firmware
        # current Debian release (V12) update, only for bookworm release
        deb http://deb.debian.org/debian bookworm-updates main contrib non-free non-free-firmware
        # current Debian release (V12) backports from next (Trixie) V13 release
        deb http://deb.debian.org/debian bookworm-backports main contrib non-free non-free-firmware
    unless: rootfs_unpacked

  # Install  flash-kernel &  initramfs-tools packages,  which needs to
  # already   have   been  installed  before   creating  /boot   final
  # directory.  Because this tools are  necessary for  on all SBC,  we
  # install then now to include them into the rootfs cache

  - apt: install
    packages:
      - flash-kernel
      - initramfs-tools
    tag: rootfs_partition_tag
    unless: rootfs_unpacked

  # Create a tarball of  the image root filesystem.  File name of this
  # file     is     defined   by   previous    command   line   option
  # "--rootfs-tarball".    Please note that    step is  linked  to the
  # previous "unpack_rootfs".

  - cache-rootfs: rootfs_partition_tag
    unless: rootfs_unpacked

  # Launch a shell into chroot and make following actions...

  - chroot: rootfs_partition_tag
    shell: |

      # Update internal  Debian apt data base. In  case we use one old
      # cache tarball, it is necessary to  look for new update

      apt-get update

      # Upgrade packages

      apt-get -y upgrade

      # When installing kernel, "flash-kernel" & "initramfs" tools are
      # automatically called. Because the target is not yet configured
      # (/etc/fstab),  we backup  and remove  post installation script
      # during kernel   installation,   so that there  are   no action
      # on rootfs.

      mv /etc/kernel/postinst.d/initramfs-tools /etc/kernel/postinst.d/zz-flash-kernel /

      # Install the current generic linux kernel for all armhf architecture

      apt-get -y install linux-image-arm64

      # Restore  previous   post-hook script,   because now  kernel  is
      # correcly installed on rootfs.

      mv /initramfs-tools /zz-flash-kernel /etc/kernel/postinst.d/


      # python3 is needed to launch "Ansible" tools later

      apt-get --assume-yes install python3 python3-apt

      # openssh-server is needed to connect to target on Ethernet port
      # (and also from Ansible script)

      apt-get --assume-yes install openssh-server openssh-sftp-server

      # Because this target boot first time in DHCP mode, then install
      # Debian ISC client

      apt-get --assume-yes install isc-dhcp-client
  - create-file: /etc/hostname
    contents: |+
      Rock64

  - fstab: rootfs_partition_tag

  - create-file: /etc/flash-kernel/machine
    contents: |+
      Pine64 Rock64

  - chroot: rootfs_partition_tag
    shell: |
      # Add hostname to /etc/hosts for IPv4 & IPv6
      HOSTNAME=$(cat /etc/hostname)
      sed -i "2i127.0.0.2\t$HOSTNAME" /etc/hosts
      sed -i "4i::2\t\t$HOSTNAME" /etc/hosts

      sed -i "s@errors=remount-ro@noatime,nodiratime,errors=remount-ro@g" /etc/fstab

      sed -i "s@quiet@root=$(grep ^UUID /etc/fstab | cut -d \  -f 1) net.ifnames=0@g" /etc/default/flash-kernel

      # Back-up fsck
      mv /usr/share/initramfs-tools/hooks/fsck /usr/share/initramfs-tools/hooks/fsck.bak
      chmod -x /usr/share/initramfs-tools/hooks/fsck.bak

      # Fix fsck to read root fstype in fstab
      sed "s@\[.*\"\/\".*|| @@g" /usr/share/initramfs-tools/hooks/fsck.bak > /usr/share/initramfs-tools/hooks/fsck
      chmod +x /usr/share/initramfs-tools/hooks/fsck

      update-initramfs -c -k $(ls -l /vmlinuz | sed "s%^.*vmlinuz-\(.*\)$%\1%g")

      sed -i "s@root:\*:@root::@g" /etc/shadow

  - apt: install
    packages:
      - u-boot-rockchip
    tag: rootfs_partition_tag

  - root-fs: rootfs_partition_tag
    shell: |
      TARGET="$ROOT/usr/lib/u-boot/rock64-rk3328" $ROOT/usr/bin/u-boot-install-rockchip {{ output }}

  - create-file: /etc/network/interfaces.d/lo
    contents: |+
      auto lo
      iface lo inet loopback

  - create-file: /etc/network/interfaces.d/eth0
    contents: |+
      auto eth0
      iface eth0 inet dhcp

  - root-fs: rootfs_partition_tag
    shell: |
      test -e vmdb2-ansible.yaml || ln -s vmdb2-ansible.yaml.example vmdb2-ansible.yaml
      mount -t proc proc $ROOT/proc

  - ansible: rootfs_partition_tag
    playbook: vmdb2-ansible.yaml

  - root-fs: rootfs_partition_tag
    shell: |
      # Restore fsck
      mv $ROOT/usr/share/initramfs-tools/hooks/fsck.bak $ROOT/usr/share/initramfs-tools/hooks/fsck
      chmod +x $ROOT/usr/share/initramfs-tools/hooks/fsck

      umount $ROOT/proc
      rm $ROOT/etc/flash-kernel/machine
      diff vmdb2-ansible.yaml.example vmdb2-ansible.yaml && test -L vmdb2-ansible.yaml && rm vmdb2-ansible.yaml || true

  - create-file: /etc/resolv.conf
    contents: |